/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Scheduling_Algorithms;

import Muficterials.DrawScroll;
import Muficterials.Panels2;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author dell
 */
public class Scheduling_Inputs extends javax.swing.JFrame {

    /**
     * Creates new form Scheduling_Inputs
     */
    String TheMethod="- Select -" ;
    
    JLabel lb_Process [] ;
    JTextField text [] ;
    JTextField Qtx ;
    
    JLabel Bur_Ari [] ;
    
    JPanel pn1 ;
    JPanel pn2 ;
    JPanel pn3 ;
    JPanel pn4 ;

    JButton but ;
    
    int [] Process_Number ;
    String[]Process_Name ;
    double[]Burst_Time;
    double[]Arrival_Time;
    
    public Scheduling_Inputs() {
        initComponents();
        
ImageIcon icon = new ImageIcon(getClass().getResource("/Images/ImageIcon.png"));
this.setIconImage(icon.getImage());

        
        Bur_Ari = new JLabel[3] ;
        
        jPanel4.setLayout(new GridLayout(1, 2));
        
       pn1 = new JPanel();
         pn2 = new JPanel();
         pn3 = new JPanel();
          pn4 = new JPanel();
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        button1 = new java.awt.Button();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BA_Process = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Scheduling Algorithms");
        setBackground(new java.awt.Color(102, 167, 205));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(0, 204, 204));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(80, 62, 173));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(141, 215, 91));
        jLabel1.setText("Scheduling Alogorithms");
        jLabel1.setRequestFocusEnabled(false);
        jPanel1.add(jLabel1);
        jLabel1.setBounds(350, 30, 270, 40);

        jPanel2.setBackground(new java.awt.Color(80, 62, 173));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel2MouseExited(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8_Back_To_50px.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(10, 10, 50, 50);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 972, 104));

        jPanel3.setBackground(java.awt.Color.gray);
        jPanel3.setLayout(null);

        jLabel2.setBackground(new java.awt.Color(31, 56, 141));
        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(8, 0, 152));
        jLabel2.setText("Please Choose Method of solution");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(10, 100, 280, 30);

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 18)); // NOI18N
        jLabel3.setText("Do what you are asked to do");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(50, 20, 260, 30);

        jComboBox1.setBackground(java.awt.Color.gray);
        jComboBox1.setForeground(new java.awt.Color(102, 51, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select -", "FCFS", "RR", "SPN", "HRRN" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBox1);
        jComboBox1.setBounds(74, 142, 150, 40);

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(31, 56, 141));
        jLabel4.setText("Number of processes");
        jPanel3.add(jLabel4);
        jLabel4.setBounds(10, 300, 190, 30);

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setSelectionColor(java.awt.Color.white);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });
        jPanel3.add(jTextField1);
        jTextField1.setBounds(210, 290, 90, 50);

        button1.setBackground(new java.awt.Color(153, 153, 153));
        button1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        button1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        button1.setForeground(new java.awt.Color(102, 0, 51));
        button1.setLabel("OK");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        button1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                button1KeyPressed(evt);
            }
        });
        jPanel3.add(button1);
        button1.setBounds(100, 420, 120, 50);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8_Attention_32px_2.png"))); // NOI18N
        jPanel3.add(jLabel5);
        jLabel5.setBounds(10, 20, 32, 30);

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 99, 320, 520));

        BA_Process.setBackground(new java.awt.Color(120, 187, 240));
        BA_Process.setLayout(new java.awt.BorderLayout());
        jScrollPane1.setViewportView(BA_Process);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(321, 100, 650, 460));

        jPanel4.setBackground(new java.awt.Color(120, 187, 240));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 651, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(321, 559, 651, 60));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        
        
         jPanel4.removeAll();
         pn1.removeAll();
         pn2.removeAll();
         pn3.removeAll();
         
       int num =0;

        try{

            if("- Select -".equals(TheMethod)){
            
              JOptionPane.showMessageDialog(null,"Please ?! Choose an Operation");
            
            }else{
            
         num = Integer.parseInt(jTextField1.getText());
         
          lb_Process = new JLabel[num] ;
                text = new JTextField[num*2];
                Process_Name = new String[num];
                Process_Number = new int [num];
                Burst_Time = new double[num];
                Arrival_Time = new double[num];

        
        BA_Process.setLayout(new BorderLayout(5,5));
        
    pn1.setLayout(new GridLayout(1 , 3)); // north      
    pn2.setLayout(new GridLayout(num , 1)); // west          
    pn3.setLayout(new GridLayout(num , 2));    // Center
 
    pn4.setLayout(new GridLayout(1 , 2 , 3 , 5));    // south

    pn1.setBackground(new Color(120,187,240));
    pn2.setBackground(new Color(120,187,240));
    pn3.setBackground(new Color(120,187,240));
    pn4.setBackground(new Color(120,187,240));
        
    Bur_Ari[0] = new JLabel("            ");
        pn1.add(Bur_Ari[0]);
        
    Bur_Ari[1] = new JLabel(" Burst Time ");
              Bur_Ari[1].setFont(new Font("Arial", Font.BOLD, 18));
        pn1.add(Bur_Ari[1]);
        
    Bur_Ari[2] = new JLabel(" Arrival Time ");
             Bur_Ari[2].setFont(new Font("Arial", Font.BOLD, 18));
        pn1.add(Bur_Ari[2]);


        for (int i = 0; i < lb_Process.length; i++) {
            
            lb_Process[i] = new JLabel(" process "+(i+1));
                   lb_Process[i].setFont(new Font("Arial", Font.BOLD, 18));
            pn2.add(lb_Process[i]) ;
            
            Process_Name[i] = "process "+(i+1) ;
   
           Process_Number[i] = i ;
           
        }
        
      
        for (int i = 0; i < text.length; i++) {


                text[i] = new JTextField(10);
                text[i].setFont(new Font("Tahoma", Font.PLAIN, 18));
//            text[i].setSize(10, 20);
            text[i].setHorizontalAlignment((int) CENTER_ALIGNMENT);
            pn3.add(text[i]);
            
           
        }
        
        if("FeedBack".equals(TheMethod) || "RR".equals(TheMethod)){
        
        JPanel Qpn = new JPanel();
        JLabel Qlp = new JLabel("Quantum");
         Qtx = new JTextField(10);
         Qtx.setFont(new Font("Tahoma", Font.PLAIN, 18));
            Qtx.setHorizontalAlignment((int) CENTER_ALIGNMENT);
         
         Qpn.setBackground(new Color(120,178,242));
        Qpn.setLayout(new GridLayout(1,2,3,3));
        
        Qlp.setFont(new Font("Arial", Font.BOLD, 24));
         Qlp.setBackground(new Color(102,167,205));
         
        Qpn.add(Qlp);
        
        Qpn.add(Qtx);
        
        but = new JButton("Solve");
         but.setPreferredSize(new Dimension(50,50));
         but.setFont(new Font("Forte", Font.BOLD, 24));
         but.setBackground(new Color(102,167,205));
        
        jPanel4.add(Qpn) ;
                 jPanel4.add(but , BorderLayout.CENTER);

        
        }else{  
            
            but = new JButton("Solve");
         but.setPreferredSize(new Dimension(50,50));
         but.setFont(new Font("Forte", Font.BOLD, 24));
         but.setBackground(new Color(102,167,205));
         jPanel4.add(but , BorderLayout.CENTER);
         
             }
        
        BA_Process.add(pn1 , BorderLayout.NORTH);
        BA_Process.add(pn2 , BorderLayout.WEST);
        BA_Process.add(pn3 , BorderLayout.CENTER);
        BA_Process.add(pn4 , BorderLayout.SOUTH);
        
//             BA_Process.add(new DrawScroll().makeUI());

         BA_Process.validate();
        jPanel4.validate();
        jScrollPane1.validate();
        
        
                 Readtext();
                 
            }
            
        }catch(Exception ie){
            
                        JOptionPane.showMessageDialog(null,"Please ?! Enter a Number");

        }
       
                
        
    }//GEN-LAST:event_button1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
         JComboBox CB = (JComboBox)evt.getSource() ;
        
         TheMethod = (String)CB.getSelectedItem();
         
        
           if("- Select -".equals(TheMethod)){
           
                                   JOptionPane.showMessageDialog(null,"Please ?! Choose an Operation");

           }
         
         
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jPanel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseEntered
        // TODO add your handling code here:
        jPanel2.setBackground(new Color(80,73,211));
    }//GEN-LAST:event_jPanel2MouseEntered

    private void jPanel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseExited
        // TODO add your handling code here:
                jPanel2.setBackground(new Color(80,62,173));
    }//GEN-LAST:event_jPanel2MouseExited

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        Panels2 elwagha = new Panels2();
               elwagha.setLocationRelativeTo(null);
               elwagha.setVisible(true);
               
               elwagha.addWindowListener(new java.awt.event.WindowAdapter() {
    @Override
    public void windowClosing(java.awt.event.WindowEvent windowEvent) {
        if (JOptionPane.showConfirmDialog(elwagha, 
            "Are you sure to close this window?", "Really Closing?", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }
});
    }//GEN-LAST:event_jPanel2MouseClicked

    private void button1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_button1KeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        
        
        
        jPanel4.removeAll();
         pn1.removeAll();
         pn2.removeAll();
         pn3.removeAll();
         
       int num =0;

        try{

            if("- Select -".equals(TheMethod)){
            
              JOptionPane.showMessageDialog(null,"Please ?! Choose an Operation");
            
            }else{
            
         num = Integer.parseInt(jTextField1.getText());
         
          lb_Process = new JLabel[num] ;
                text = new JTextField[num*2];
                Process_Name = new String[num];
                Process_Number = new int [num];
                Burst_Time = new double[num];
                Arrival_Time = new double[num];

        
        BA_Process.setLayout(new BorderLayout(5,5));
        
    pn1.setLayout(new GridLayout(1 , 3)); // north      
    pn2.setLayout(new GridLayout(num , 1)); // west          
    pn3.setLayout(new GridLayout(num , 2));    // Center
 
    pn4.setLayout(new GridLayout(1 , 2 , 3 , 5));    // south

    pn1.setBackground(new Color(120,187,240));
    pn2.setBackground(new Color(120,187,240));
    pn3.setBackground(new Color(120,187,240));
    pn4.setBackground(new Color(120,187,240));
        
    Bur_Ari[0] = new JLabel("            ");
        pn1.add(Bur_Ari[0]);
        
    Bur_Ari[1] = new JLabel(" Burst Time ");
              Bur_Ari[1].setFont(new Font("Arial", Font.BOLD, 18));
        pn1.add(Bur_Ari[1]);
        
    Bur_Ari[2] = new JLabel(" Arrival Time ");
             Bur_Ari[2].setFont(new Font("Arial", Font.BOLD, 18));
        pn1.add(Bur_Ari[2]);


        for (int i = 0; i < lb_Process.length; i++) {
            
            lb_Process[i] = new JLabel(" process "+(i+1));
                   lb_Process[i].setFont(new Font("Arial", Font.BOLD, 18));
            pn2.add(lb_Process[i]) ;
            
            Process_Name[i] = "process "+(i+1) ;
   
           Process_Number[i] = i ;
           
        }
        
      
        for (int i = 0; i < text.length; i++) {


                text[i] = new JTextField(10);
                text[i].setFont(new Font("Tahoma", Font.PLAIN, 18));
//            text[i].setSize(10, 20);
            text[i].setHorizontalAlignment((int) CENTER_ALIGNMENT);
            pn3.add(text[i]);
            
           
        }
        
        if("FeedBack".equals(TheMethod) || "RR".equals(TheMethod)){
        
        JPanel Qpn = new JPanel();
        JLabel Qlp = new JLabel("Quantum");
         Qtx = new JTextField(10);
         Qtx.setFont(new Font("Tahoma", Font.PLAIN, 18));
            Qtx.setHorizontalAlignment((int) CENTER_ALIGNMENT);
         
         Qpn.setBackground(new Color(120,178,242));
        Qpn.setLayout(new GridLayout(1,2,3,3));
        
        Qlp.setFont(new Font("Arial", Font.BOLD, 24));
         Qlp.setBackground(new Color(102,167,205));
         
        Qpn.add(Qlp);
        
        Qpn.add(Qtx);
        
        but = new JButton("Solve");
         but.setPreferredSize(new Dimension(50,50));
         but.setFont(new Font("Forte", Font.BOLD, 24));
         but.setBackground(new Color(102,167,205));
        
        jPanel4.add(Qpn) ;
                 jPanel4.add(but , BorderLayout.CENTER);

        
        }else{  
            
            but = new JButton("Solve");
         but.setPreferredSize(new Dimension(50,50));
         but.setFont(new Font("Forte", Font.BOLD, 24));
         but.setBackground(new Color(102,167,205));
         jPanel4.add(but , BorderLayout.CENTER);
         
             }
        
        BA_Process.add(pn1 , BorderLayout.NORTH);
        BA_Process.add(pn2 , BorderLayout.WEST);
        BA_Process.add(pn3 , BorderLayout.CENTER);
        BA_Process.add(pn4 , BorderLayout.SOUTH);
        
         
         BA_Process.validate();
        jPanel4.validate();
        jScrollPane1.validate();
        
        
                 Readtext();
                 
            }
            
        }catch(Exception ie){
            
                        JOptionPane.showMessageDialog(null,"Please ?! Enter a Number");

        }
       
        
        
        }
    }//GEN-LAST:event_button1KeyPressed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
        
         if(evt.getKeyCode() == KeyEvent.VK_ENTER){
    
    
     jPanel4.removeAll();
         pn1.removeAll();
         pn2.removeAll();
         pn3.removeAll();
         
       int num =0;

        try{

            if("- Select -".equals(TheMethod)){
            
              JOptionPane.showMessageDialog(null,"Please ?! Choose an Operation");
            
            }else{
            
         num = Integer.parseInt(jTextField1.getText());
         
          lb_Process = new JLabel[num] ;
                text = new JTextField[num*2];
                Process_Name = new String[num];
                Process_Number = new int [num];
                Burst_Time = new double[num];
                Arrival_Time = new double[num];

        
        BA_Process.setLayout(new BorderLayout(5,5));
        
    pn1.setLayout(new GridLayout(1 , 3)); // north      
    pn2.setLayout(new GridLayout(num , 1)); // west          
    pn3.setLayout(new GridLayout(num , 2));    // Center
 
    pn4.setLayout(new GridLayout(1 , 2 , 3 , 5));    // south

    pn1.setBackground(new Color(120,187,240));
    pn2.setBackground(new Color(120,187,240));
    pn3.setBackground(new Color(120,187,240));
    pn4.setBackground(new Color(120,187,240));
        
    Bur_Ari[0] = new JLabel("            ");
        pn1.add(Bur_Ari[0]);
        
    Bur_Ari[1] = new JLabel(" Burst Time ");
              Bur_Ari[1].setFont(new Font("Arial", Font.BOLD, 18));
        pn1.add(Bur_Ari[1]);
        
    Bur_Ari[2] = new JLabel(" Arrival Time ");
             Bur_Ari[2].setFont(new Font("Arial", Font.BOLD, 18));
        pn1.add(Bur_Ari[2]);


        for (int i = 0; i < lb_Process.length; i++) {
            
            lb_Process[i] = new JLabel(" process "+(i+1));
                   lb_Process[i].setFont(new Font("Arial", Font.BOLD, 18));
            pn2.add(lb_Process[i]) ;
            
            Process_Name[i] = "process "+(i+1) ;
   
           Process_Number[i] = i ;
           
        }
        
      
        for (int i = 0; i < text.length; i++) {


                text[i] = new JTextField(10);
                text[i].setFont(new Font("Tahoma", Font.PLAIN, 18));
//            text[i].setSize(10, 20);
            text[i].setHorizontalAlignment((int) CENTER_ALIGNMENT);
            pn3.add(text[i]);
            
           
        }
        
        if("FeedBack".equals(TheMethod) || "RR".equals(TheMethod)){
            
            for (int i = 1; i < text.length; i+=2) {
                
                text[i].setText(""+0);
        text[i].setBackground(new Color(153, 153, 153));

                text[i].setEditable(false);
            }
            
        JPanel Qpn = new JPanel();
        JLabel Qlp = new JLabel("Quantum");
         Qtx = new JTextField(10);
         Qtx.setFont(new Font("Tahoma", Font.PLAIN, 18));
            Qtx.setHorizontalAlignment((int) CENTER_ALIGNMENT);
         
         Qpn.setBackground(new Color(120,178,242));
        Qpn.setLayout(new GridLayout(1,2,3,3));
        
        Qlp.setFont(new Font("Arial", Font.BOLD, 24));
         Qlp.setBackground(new Color(102,167,205));
         
        Qpn.add(Qlp);
        
        Qpn.add(Qtx);
        
        but = new JButton("Solve");
         but.setPreferredSize(new Dimension(50,50));
         but.setFont(new Font("Forte", Font.BOLD, 24));
         but.setBackground(new Color(102,167,205));
        
        jPanel4.add(Qpn) ;
                 jPanel4.add(but , BorderLayout.CENTER);

        
        }else{  
            
            but = new JButton("Solve");
         but.setPreferredSize(new Dimension(50,50));
         but.setFont(new Font("Forte", Font.BOLD, 24));
         but.setBackground(new Color(102,167,205));
         jPanel4.add(but , BorderLayout.CENTER);
         
             }
        
        BA_Process.add(pn1 , BorderLayout.NORTH);
        BA_Process.add(pn2 , BorderLayout.WEST);
        BA_Process.add(pn3 , BorderLayout.CENTER);
        BA_Process.add(pn4 , BorderLayout.SOUTH);
        
         
         BA_Process.validate();
        jPanel4.validate();
        jScrollPane1.validate();
        
        
                 Readtext();
                 
            }
            
        }catch(Exception ie){
            
                        JOptionPane.showMessageDialog(null,"Please ?! Enter a Number");

        }
       
                


    
    }
    }//GEN-LAST:event_jTextField1KeyPressed

    
    public void Readtext(){
    
    but.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            int c = 0 ;
int Quantum = 0 ;

try{
            for (int i = 0; i < text.length; i+=2) {

                Burst_Time[c] = Double.parseDouble(text[i].getText()) ;
                
                c++ ;
            }
            
            c = 0 ; 
            for (int i = 1 ; i < text.length; i+=2) {

                Arrival_Time[c] = Double.parseDouble(text[i].getText()) ;
                
                c++ ;
            }
            
            if("FeedBack".equals(TheMethod) || "RR".equals(TheMethod)){
            
             Quantum = Integer.parseInt(Qtx.getText());
            
            }
            
            //--------------------------------------------
            
            if("FCFS".equals(TheMethod)){
           
       FCFS_Scheduling perform1 = new FCFS_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform1.Sort_Processes();
        perform1.AVG_WaitingTime();
                 }else
                     
                     if("SPN".equals(TheMethod)){
        SPN_Scheduling perform2 = new SPN_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform2.Sort_Processes();
        perform2.AVG_WaitingTime();
                     }
                     else
                     
                      if("HRRN".equals(TheMethod)){
                     
         HRRN_Scheduling perform3 = new HRRN_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform3.WaitingTime();
        perform3.RRi_process();
        perform3.AVG_WaitingTime();
                     
                     
                     
                     }else
                      
                        if("RR".equals(TheMethod)){
                      
        RR_Scheduling perform5 = new RR_Scheduling(Burst_Time , Arrival_Time , Quantum , Process_Name , Process_Number);
        
                    perform5.findavgTime();
                            
                      
                      }else{
                            
                                    JOptionPane.showMessageDialog(null,"Please ?! Choose an Operation");
 

                        }
            
}catch(Exception ec){

                                    JOptionPane.showMessageDialog(null,"Please ?! Enter Numbers in the Textfields");

}

        }
    });
    
    but.addKeyListener(new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {

             if(e.getKeyCode() == KeyEvent.VK_ENTER){
    
    
    int c = 0 ;
int Quantum = 0 ;

try{
            for (int i = 0; i < text.length; i+=2) {

                Burst_Time[c] = Double.parseDouble(text[i].getText()) ;
                
                c++ ;
            }
            
            c = 0 ; 
            for (int i = 1 ; i < text.length; i+=2) {

                Arrival_Time[c] = Double.parseDouble(text[i].getText()) ;
                
                c++ ;
            }
            
            if("FeedBack".equals(TheMethod) || "RR".equals(TheMethod)){
            
             Quantum = Integer.parseInt(Qtx.getText());
            
            }
            
            //--------------------------------------------
            
            if("FCFS".equals(TheMethod)){
           
       FCFS_Scheduling perform1 = new FCFS_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform1.Sort_Processes();
        perform1.AVG_WaitingTime();
                 }else
                     
                     if("SPN".equals(TheMethod)){
        SPN_Scheduling perform2 = new SPN_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform2.Sort_Processes();
        perform2.AVG_WaitingTime();
                     }
                     else
                     
                      if("HRRN".equals(TheMethod)){
                     
         HRRN_Scheduling perform3 = new HRRN_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform3.WaitingTime();
        perform3.RRi_process();
        perform3.AVG_WaitingTime();
                     
                     
                     
                     }else
                      
                        if("RR".equals(TheMethod)){
                      
        RR_Scheduling perform5 = new RR_Scheduling(Burst_Time , Arrival_Time , Quantum , Process_Name , Process_Number);
        
                    perform5.findavgTime();
                            
                      
                      }else{
                            
                                    JOptionPane.showMessageDialog(null,"Please ?! Choose an Operation");
 

                        }
            
}catch(Exception ec){

                                    JOptionPane.showMessageDialog(null,"Please ?! Enter Numbers in the Textfields");

}

    
    }
    

        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    });
    
    
    text[text.length-1].addKeyListener(new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {

             if(e.getKeyCode() == KeyEvent.VK_ENTER){
    
    
    int c = 0 ;
int Quantum = 0 ;

try{
            for (int i = 0; i < text.length; i+=2) {

                Burst_Time[c] = Double.parseDouble(text[i].getText()) ;
                
                c++ ;
            }
            
            c = 0 ; 
            for (int i = 1 ; i < text.length; i+=2) {

                Arrival_Time[c] = Double.parseDouble(text[i].getText()) ;
                
                c++ ;
            }
            
            if("FeedBack".equals(TheMethod) || "RR".equals(TheMethod)){
            
             Quantum = Integer.parseInt(Qtx.getText());
            
            }
            
            //--------------------------------------------
            
            if("FCFS".equals(TheMethod)){
           
       FCFS_Scheduling perform1 = new FCFS_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform1.Sort_Processes();
        perform1.AVG_WaitingTime();
                 }else
                     
                     if("SPN".equals(TheMethod)){
        SPN_Scheduling perform2 = new SPN_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform2.Sort_Processes();
        perform2.AVG_WaitingTime();
                     }
                     else
                     
                      if("HRRN".equals(TheMethod)){
                     
         HRRN_Scheduling perform3 = new HRRN_Scheduling(Burst_Time , Arrival_Time , Process_Name , Process_Number);

        perform3.WaitingTime();
        perform3.RRi_process();
        perform3.AVG_WaitingTime();
                     
                     
                     
                     }else
                      
                        if("RR".equals(TheMethod)){
                      
        RR_Scheduling perform5 = new RR_Scheduling(Burst_Time , Arrival_Time , Quantum , Process_Name , Process_Number);
        
                    perform5.findavgTime();
                            
                      
                      }else{
                            
                                    JOptionPane.showMessageDialog(null,"Please ?! Choose an Operation");
 

                        }
            
}catch(Exception ec){

                                    JOptionPane.showMessageDialog(null,"Please ?! Enter Numbers in the Textfields");

}

    
    }
    

        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    });
    }
    
   
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BA_Process;
    private java.awt.Button button1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
