/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OR1_Simplex;

import Muficterials.Panels2;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;


/**
 *
 * @author dell
 */
public class Simplex_Inputs extends javax.swing.JFrame {

    /**
     * Creates new form Simplex_Inputs
     */
    int Varnumber1 ;
    int Connumber2 ;
    String Objmaxmin ;
    JPanel pn1 ;
    JPanel pn2 ;
    JPanel pn3 ;
    JPanel pn4 ;
    JPanel pn5 ;
         int flagm = 1 ;
    
    JPanel [] constr ;
    JLabel Varname [] ;
      JLabel  Varnameconstr [] ;
      
        JTextField [] ObjFunction ;
        JTextField [] ConstraintText ;
        
        JLabel [] VariableName ;
        JButton btn ;
         List<JComboBox> array ;
        JComboBox [] GreatLess ;
        JComboBox <String> Z ;
        
                    JScrollPane scroll ;

        JPanel Scrollpanel ;
        
        JLabel [] plus ;
        
                String [] maxmin = {"- Select -" , "MAX" , "MIN"};
                String [] greatless = {"- Select -" , ">=" , "<=" , "="};
                
                                double [][] arrtable ;


        public Simplex_Inputs() {
        initComponents();
        
        ImageIcon icon = new ImageIcon(getClass().getResource("/Images/ImageIcon.png"));
this.setIconImage(icon.getImage());
        
        pn1 = new JPanel();
         pn2 = new JPanel();
         pn3 = new JPanel();
         pn4 = new JPanel();
         pn5 = new JPanel();
         
       Scrollpanel = new JPanel();
       
                  scroll = new JScrollPane();
//array = new ArrayList<JComboBox>();
                 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Simplex");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(110, 17, 117));

        jPanel2.setBackground(new java.awt.Color(110, 17, 117));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter the number of Variables");

        jLabel3.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Enter the number of Constriants");

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(101, 39, 129));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel4MouseExited(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8_Back_To_50px.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4)
        );

        jLabel1.setFont(new java.awt.Font("Sitka Display", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Simplex");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                    .addComponent(jTextField2))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(jLabel1)
                .addGap(111, 111, 111)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(96, 96, 96)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        jPanel3.setBackground(new java.awt.Color(101, 39, 129));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 755, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        pn1.removeAll();
        pn2.removeAll();
        pn5.removeAll();
        pn4.removeAll();
        


        try{
        
        Varnumber1 = Integer.parseInt(jTextField1.getText());
        
        Connumber2 = Integer.parseInt(jTextField2.getText());
        
                                  plus = new JLabel[(Varnumber1-1)+((Varnumber1-1)*Connumber2)];

        
        jPanel3.setLayout(new BorderLayout(3,3));
        
        pn1.setLayout(new FlowLayout(FlowLayout.LEFT)); // north      
    pn2.setLayout(new FlowLayout(FlowLayout.CENTER)); // west          
    pn3.setLayout(new GridLayout(1 , 1));    // east
    pn4.setLayout(new GridLayout(1 , 1 , 3 , 5));    // south
    pn5.setLayout(new GridLayout(Connumber2 , 1)); // center  
    Scrollpanel.setLayout(new BorderLayout(3,3));
    
    pn1.setBackground(new Color(101,39,129));
    pn2.setBackground(new Color(101,39,129));
    pn3.setBackground(new Color(101,39,129));
    pn4.setBackground(new Color(101,39,129));
    pn5.setBackground(new Color(101,39,129));
    Scrollpanel.setBackground(new Color(101,39,129));

    
    ObjFunction = new JTextField[Varnumber1];
    ConstraintText = new JTextField[(Varnumber1*Connumber2)+Connumber2];
    constr = new JPanel[Connumber2];
    
        for (int i = 0; i < constr.length; i++) {
            constr[i] = new JPanel();
         constr[i].setLayout(new FlowLayout(FlowLayout.LEFT));
         
         constr[i].setBackground(new Color(101,39,129));

        }

    
        
            
            Z = new JComboBox<>(maxmin);
            Z.setFont(new Font("Arial", Font.PLAIN, 18));
            Z.setSelectedIndex(0);
            
            GreatLess = new JComboBox [Connumber2] ;
            for (int i = 0; i < Connumber2; i++) {
            GreatLess[i] = new JComboBox <String> (greatless);
            GreatLess[i].setFont(new Font("Arial", Font.PLAIN, 16));
            GreatLess[i].setSelectedIndex(0);

// GreatLess = new JComboBox<>(new String[]{"- Select -" , ">=" , "<=" , "="});
        }
            
    // objective function
            pn1.add(Z) ;
            JLabel zfun = new JLabel("Z = ");
            zfun.setFont(new Font("Arial", Font.BOLD, 18));
            zfun.setForeground(Color.WHITE);
            pn1.add(zfun);
            
             Varname = new JLabel[Varnumber1];
            int lc = 0 ;
            for (int i = 0; i < ObjFunction.length; i++) {
                
                ObjFunction[i] = new JTextField(10);
                 ObjFunction[i].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ObjFunction[i].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                pn1.add(ObjFunction[i]);
                Varname[i] = new JLabel("X"+(i+1));
                Varname[i].setFont(new Font("Arial", Font.BOLD, 16));
                Varname[i].setForeground(Color.WHITE);
//                pn1.add(new Label("X"+(i+1)));
                                pn1.add(Varname[i]);

                if(i != ObjFunction.length-1){
                    plus[lc] = new JLabel("+");
                     plus[lc].setFont(new Font("Arial", Font.BOLD, 20));
                  plus[lc].setForeground(new Color(204, 204, 204));
                pn1.add(plus[lc]);
                lc++ ;
//                pn1.validate();
                }
        }
            
            JLabel st = new JLabel("S.T )");
            st.setFont(new Font("Arial", Font.BOLD, 18));
            st.setForeground(Color.WHITE);
            pn2.add(st);
            
            // constriats
            int i ;
            int v = 0  ;
             Varnameconstr = new JLabel[Varnumber1];
            for (int k = 0; k < Connumber2; k++) {
                
            for ( i = 0; i < ObjFunction.length; i++) {
                ConstraintText[v] = new JTextField(10);
                ConstraintText[v].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ConstraintText[v].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                constr[k].add(ConstraintText[v]);
                v++ ;
                Varnameconstr[i] = new JLabel("X"+(i+1));
                Varnameconstr[i].setFont(new Font("Arial", Font.BOLD, 16));
                Varnameconstr[i].setForeground(Color.WHITE);
                constr[k].add(Varnameconstr[i]);
//                constr[k].add(Varnameconstr[i]);

                if(i != ObjFunction.length-1){
                    plus[lc] = new JLabel("+");
                    plus[lc].setFont(new Font("Arial", Font.BOLD, 20));
                  plus[lc].setForeground(new Color(204, 204, 204));
                         constr[k].add(plus[lc]);
                         lc++;
// constr[k].validate();
                }
        }
            constr[k].add(GreatLess[k]);
            
            ConstraintText[v] = new JTextField(10);
            ConstraintText[v].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ConstraintText[v].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                   constr[k].add(ConstraintText[v]);
                   v++;
                   
                   pn5.add(constr[k]);

            }
            
            
              btn = new JButton("Solve");
            
            btn.setFont(new Font("Arial", Font.BOLD, 20));
            btn.setBackground(new Color(101, 75, 163));
            pn4.add(btn);
            
                       

            Scrollpanel.add(pn1 , BorderLayout.NORTH);
            Scrollpanel.add(pn2 , BorderLayout.WEST);
            Scrollpanel.add(pn5 , BorderLayout.CENTER);
            Scrollpanel.add(pn3 , BorderLayout.EAST);
            scroll.setViewportView(Scrollpanel);
            jPanel3.add(scroll , BorderLayout.CENTER);
            jPanel3.add(pn4 , BorderLayout.SOUTH);
            
                      scroll.revalidate();
                        scroll.repaint();

            
            pn1.revalidate();
            pn1.repaint();
            pn2.validate();
            pn5.validate();
            pn4.validate();
            
            jPanel3.validate();
                       
            
            btnAction();
        }catch(Exception e){
        
                    JOptionPane.showMessageDialog(null,"Please ?! Enter a Number");

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public void btnAction(){
    
    
    btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                double [] objFunction = new double[ObjFunction.length];
                double [][] leftValue = new double[Connumber2][Varnumber1];
                double [] rightValue  = new double[Connumber2];
                String Objmaxmin ;
                String [] Conmaxmineq = new String[Connumber2];
                          Constraint[] constraintOperator = new Constraint[rightValue.length];
                int p = 0;
                          try{
                              
                for (int j = 0; j < ObjFunction.length; j++) {

                    objFunction[j] = Double.parseDouble(ObjFunction[j].getText());
                    
                    System.out.println(objFunction[j]);
                    
                }
                int v1 = 0 ;
                int v2 = 0 ;
                int k ;
                for (int j = 0; j < ConstraintText.length ; j+=Varnumber1+1) {
                    for (k = j; k < Varnumber1+j ; k++) {

                        leftValue [v2][v1] = Double.parseDouble(ConstraintText[k].getText());
                        System.out.println( leftValue [v2][v1]);
                        v1++ ;
                    }
                    
                    rightValue[v2] = Double.parseDouble(ConstraintText[k].getText());
                    System.out.println(rightValue[v2]);
                    v2++ ;
                    v1 = 0 ;
                }

                Objmaxmin = Z.getSelectedItem().toString();
                
                for (int j = 0; j < Conmaxmineq.length; j++) {

                    Conmaxmineq[j] = GreatLess[j].getSelectedItem().toString();
                }
                
                
            for (int i = 0; i < constraintOperator.length; i++) {

        if(">=".equals(Conmaxmineq[i])) 
        constraintOperator[i] = Constraint.greatherThan ;
                else
            if("<=".equals(Conmaxmineq[i]))
        constraintOperator[i] = Constraint.lessThan ;
                else
                 if("=".equals(Conmaxmineq[i]))
                        constraintOperator[i] = Constraint.equal ;
                 else{
//                          JOptionPane.showMessageDialog(null,"Please ?! Choose any Arithmetic Signs");

                 }

     }
               
     
                Modeler(leftValue, rightValue, constraintOperator, objFunction , Objmaxmin);
                
                if("MAX".equals(Objmaxmin)){
                Simplex_Output out = new Simplex_Output(arrtable, Connumber2, Varnumber1, true , flagm);
                           p = out.unbounded();
                out.setLocationRelativeTo(null);
                out.setVisible(true);
                }
                else
                            if("MIN".equals(Objmaxmin)){
                  Simplex_Output out = new Simplex_Output(arrtable, Connumber2, Varnumber1, false , flagm);
                                  p = out.unbounded();
                out.setLocationRelativeTo(null);
                out.setVisible(true);
                }else{
                                     
                    JOptionPane.showMessageDialog(null,"Please ?! Choose Max Or Min");
         
                                     }
                
if(p == -1){

JOptionPane.showMessageDialog(null,"Linear program is unbounded");

}

                          }
                          

                          catch(Exception ec){
                          
                          
                        JOptionPane.showMessageDialog(null,"Please ?! Enter Numbers in the Textfields and Choose any Arithmetic Signs");

                          }
                          
                          

            }
        });
    
    
    btn.addKeyListener(new KeyListener() {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            
                         if(e.getKeyCode() == KeyEvent.VK_ENTER){
                             
                             double [] objFunction = new double[ObjFunction.length];
                double [][] leftValue = new double[Connumber2][Varnumber1];
                double [] rightValue  = new double[Connumber2];
                
                String [] Conmaxmineq = new String[Connumber2];
                          Constraint[] constraintOperator = new Constraint[rightValue.length];
                int p = 0;
                          try{
                              
                for (int j = 0; j < ObjFunction.length; j++) {

                    objFunction[j] = Double.parseDouble(ObjFunction[j].getText());
                    
                    System.out.println(objFunction[j]);
                    
                }
                int v1 = 0 ;
                int v2 = 0 ;
                int k ;
                for (int j = 0; j < ConstraintText.length ; j+=Varnumber1+1) {
                    for (k = j; k < Varnumber1+j ; k++) {

                        leftValue [v2][v1] = Double.parseDouble(ConstraintText[k].getText());
                        System.out.println( leftValue [v2][v1]);
                        v1++ ;
                    }
                    
                    rightValue[v2] = Double.parseDouble(ConstraintText[k].getText());
                    System.out.println(rightValue[v2]);
                    v2++ ;
                    v1 = 0 ;
                }

                Objmaxmin = Z.getSelectedItem().toString();
                
                for (int j = 0; j < Conmaxmineq.length; j++) {

                    Conmaxmineq[j] = GreatLess[j].getSelectedItem().toString();
                }
                
                
            for (int i = 0; i < constraintOperator.length; i++) {

        if(">=".equals(Conmaxmineq[i])) 
        constraintOperator[i] = Constraint.greatherThan ;
                else
            if("<=".equals(Conmaxmineq[i]))
        constraintOperator[i] = Constraint.lessThan ;
                else
                 if("=".equals(Conmaxmineq[i]))
                        constraintOperator[i] = Constraint.equal ;
                 else{
//                          JOptionPane.showMessageDialog(null,"Please ?! Choose any Arithmetic Signs");

                 }

     }
               
     
                Modeler(leftValue, rightValue, constraintOperator, objFunction , Objmaxmin);
                
                if("MAX".equals(Objmaxmin)){
                Simplex_Output out = new Simplex_Output(arrtable, Connumber2, Varnumber1, true , flagm);
                           p = out.unbounded();
                out.setLocationRelativeTo(null);
                out.setVisible(true);
                }
                else
                            if("MIN".equals(Objmaxmin)){
                  Simplex_Output out = new Simplex_Output(arrtable, Connumber2, Varnumber1, false , flagm);
                                  p = out.unbounded();
                out.setLocationRelativeTo(null);
                out.setVisible(true);
                }else{
                                     
                    JOptionPane.showMessageDialog(null,"Please ?! Choose Max Or Min");
         
                                     }
                
if(p == -1){

JOptionPane.showMessageDialog(null,"Linear program is unbounded");

}

                          }
                          

                          catch(Exception ec){
                          
                          
                        JOptionPane.showMessageDialog(null,"Please ?! Enter Numbers in the Textfields and Choose any Arithmetic Signs");

                          }
                          
                          
                             
                         }
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    });
    
    }
    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        // TODO add your handling code here:
         this.setVisible(false);
        Panels2 elwagha = new Panels2();
               elwagha.setLocationRelativeTo(null);
               elwagha.setVisible(true);
               
               elwagha.addWindowListener(new java.awt.event.WindowAdapter() {
    @Override
    public void windowClosing(java.awt.event.WindowEvent windowEvent) {
        if (JOptionPane.showConfirmDialog(elwagha, 
            "Are you sure to close this window?", "Really Closing?", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }
});
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
        // TODO add your handling code here:
        jPanel4.setBackground(new Color(101,0,179));
    }//GEN-LAST:event_jPanel4MouseEntered

    private void jPanel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseExited
        // TODO add your handling code here:
                jPanel4.setBackground(new Color(101,39,129));
    }//GEN-LAST:event_jPanel4MouseExited

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
        
                                if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                
                                 pn1.removeAll();
        pn2.removeAll();
        pn5.removeAll();
        pn4.removeAll();


        try{
        
        Varnumber1 = Integer.parseInt(jTextField1.getText());
        
        Connumber2 = Integer.parseInt(jTextField2.getText());
        
                                  plus = new JLabel[(Varnumber1-1)+((Varnumber1-1)*Connumber2)];

        
        jPanel3.setLayout(new BorderLayout(3,3));
        
        pn1.setLayout(new FlowLayout(FlowLayout.LEFT)); // north      
    pn2.setLayout(new FlowLayout(FlowLayout.CENTER)); // west          
    pn3.setLayout(new GridLayout(1 , 1));    // east
    pn4.setLayout(new GridLayout(1 , 1 , 3 , 5));    // south
    pn5.setLayout(new GridLayout(Connumber2 , 1)); // center  
    Scrollpanel.setLayout(new BorderLayout(3,3));
    
    pn1.setBackground(new Color(101,39,129));
    pn2.setBackground(new Color(101,39,129));
    pn3.setBackground(new Color(101,39,129));
    pn4.setBackground(new Color(101,39,129));
    pn5.setBackground(new Color(101,39,129));
    Scrollpanel.setBackground(new Color(101,39,129));

    
    ObjFunction = new JTextField[Varnumber1];
    ConstraintText = new JTextField[(Varnumber1*Connumber2)+Connumber2];
    constr = new JPanel[Connumber2];
    
        for (int i = 0; i < constr.length; i++) {
            constr[i] = new JPanel();
         constr[i].setLayout(new FlowLayout(FlowLayout.LEFT));
         
         constr[i].setBackground(new Color(101,39,129));

        }

    
        
            
            Z = new JComboBox<>(maxmin);
            Z.setFont(new Font("Arial", Font.PLAIN, 18));
            Z.setSelectedIndex(0);
            
            GreatLess = new JComboBox [Connumber2] ;
            for (int i = 0; i < Connumber2; i++) {
            GreatLess[i] = new JComboBox <String> (greatless);
            GreatLess[i].setFont(new Font("Arial", Font.PLAIN, 16));
            GreatLess[i].setSelectedIndex(0);

// GreatLess = new JComboBox<>(new String[]{"- Select -" , ">=" , "<=" , "="});
        }
            
    // objective function
            pn1.add(Z) ;
            JLabel zfun = new JLabel("Z = ");
            zfun.setFont(new Font("Arial", Font.BOLD, 18));
            zfun.setForeground(Color.WHITE);
            pn1.add(zfun);
            
             Varname = new JLabel[Varnumber1];
            int lc = 0 ;
            for (int i = 0; i < ObjFunction.length; i++) {
                
                ObjFunction[i] = new JTextField(10);
                 ObjFunction[i].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ObjFunction[i].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                pn1.add(ObjFunction[i]);
                Varname[i] = new JLabel("X"+(i+1));
                Varname[i].setFont(new Font("Arial", Font.BOLD, 16));
                Varname[i].setForeground(Color.WHITE);
//                pn1.add(new Label("X"+(i+1)));
                                pn1.add(Varname[i]);

                if(i != ObjFunction.length-1){
 plus[lc] = new JLabel("+");
                     plus[lc].setFont(new Font("Arial", Font.BOLD, 20));
                  plus[lc].setForeground(new Color(204, 204, 204));
                pn1.add(plus[lc]);
                lc++ ;               
                }
        }
            
            JLabel st = new JLabel("S.T )");
            st.setFont(new Font("Arial", Font.BOLD, 18));
            st.setForeground(Color.WHITE);
            pn2.add(st);
            
            // constriats
            int i ;
            int v = 0  ;
             Varnameconstr = new JLabel[Varnumber1];
            for (int k = 0; k < Connumber2; k++) {
                
            for ( i = 0; i < ObjFunction.length; i++) {
                ConstraintText[v] = new JTextField(10);
                ConstraintText[v].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ConstraintText[v].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                constr[k].add(ConstraintText[v]);
                v++ ;
                Varnameconstr[i] = new JLabel("X"+(i+1));
                Varnameconstr[i].setFont(new Font("Arial", Font.BOLD, 16));
                Varnameconstr[i].setForeground(Color.WHITE);
                constr[k].add(Varnameconstr[i]);
//                constr[k].add(Varnameconstr[i]);

                if(i != ObjFunction.length-1){
                          plus[lc] = new JLabel("+");
                    plus[lc].setFont(new Font("Arial", Font.BOLD, 20));
                  plus[lc].setForeground(new Color(204, 204, 204));
                         constr[k].add(plus[lc]);
                         lc++;

                }
        }
            constr[k].add(GreatLess[k]);
            
            ConstraintText[v] = new JTextField(10);
            ConstraintText[v].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ConstraintText[v].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                   constr[k].add(ConstraintText[v]);
                   v++;
                   
                   pn5.add(constr[k]);

            }
            
            
              btn = new JButton("Solve");
            
            btn.setFont(new Font("Arial", Font.BOLD, 20));
            btn.setBackground(new Color(101, 75, 163));
            pn4.add(btn);
            
                       

            Scrollpanel.add(pn1 , BorderLayout.NORTH);
            Scrollpanel.add(pn2 , BorderLayout.WEST);
            Scrollpanel.add(pn5 , BorderLayout.CENTER);
            Scrollpanel.add(pn3 , BorderLayout.EAST);
            scroll.setViewportView(Scrollpanel);
            jPanel3.add(scroll , BorderLayout.CENTER);
            jPanel3.add(pn4 , BorderLayout.SOUTH);
            
                      scroll.revalidate();
                        scroll.repaint();

            
            pn1.revalidate();
            pn1.repaint();
            pn2.validate();
            pn5.validate();
            pn4.validate();
            
            jPanel3.validate();
                       
            
            btnAction();
        }catch(Exception e){
        
                    JOptionPane.showMessageDialog(null,"Please ?! Enter a Number");

        }
                                
                                }

    }//GEN-LAST:event_jButton1KeyPressed

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        // TODO add your handling code here:
        
         if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                
                                 pn1.removeAll();
        pn2.removeAll();
        pn5.removeAll();
        pn4.removeAll();


        try{
        
        Varnumber1 = Integer.parseInt(jTextField1.getText());
        
        Connumber2 = Integer.parseInt(jTextField2.getText());
        
                                  plus = new JLabel[(Varnumber1-1)+((Varnumber1-1)*Connumber2)];

        
        jPanel3.setLayout(new BorderLayout(3,3));
        
        pn1.setLayout(new FlowLayout(FlowLayout.LEFT)); // north      
    pn2.setLayout(new FlowLayout(FlowLayout.CENTER)); // west          
    pn3.setLayout(new GridLayout(1 , 1));    // east
    pn4.setLayout(new GridLayout(1 , 1 , 3 , 5));    // south
    pn5.setLayout(new GridLayout(Connumber2 , 1)); // center  
    Scrollpanel.setLayout(new BorderLayout(3,3));
    
    pn1.setBackground(new Color(101,39,129));
    pn2.setBackground(new Color(101,39,129));
    pn3.setBackground(new Color(101,39,129));
    pn4.setBackground(new Color(101,39,129));
    pn5.setBackground(new Color(101,39,129));
    Scrollpanel.setBackground(new Color(101,39,129));

    
    ObjFunction = new JTextField[Varnumber1];
    ConstraintText = new JTextField[(Varnumber1*Connumber2)+Connumber2];
    constr = new JPanel[Connumber2];
    
        for (int i = 0; i < constr.length; i++) {
            constr[i] = new JPanel();
         constr[i].setLayout(new FlowLayout(FlowLayout.LEFT));
         
         constr[i].setBackground(new Color(101,39,129));

        }

    
        
            
            Z = new JComboBox<>(maxmin);
            Z.setFont(new Font("Arial", Font.PLAIN, 18));
            Z.setSelectedIndex(0);
            
            GreatLess = new JComboBox [Connumber2] ;
            for (int i = 0; i < Connumber2; i++) {
            GreatLess[i] = new JComboBox <String> (greatless);
            GreatLess[i].setFont(new Font("Arial", Font.PLAIN, 16));
            GreatLess[i].setSelectedIndex(0);

// GreatLess = new JComboBox<>(new String[]{"- Select -" , ">=" , "<=" , "="});
        }
            
    // objective function
            pn1.add(Z) ;
            JLabel zfun = new JLabel("Z = ");
            zfun.setFont(new Font("Arial", Font.BOLD, 18));
            zfun.setForeground(Color.WHITE);
            pn1.add(zfun);
            
             Varname = new JLabel[Varnumber1];
            int lc = 0 ;
            for (int i = 0; i < ObjFunction.length; i++) {
                
                ObjFunction[i] = new JTextField(10);
                 ObjFunction[i].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ObjFunction[i].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                pn1.add(ObjFunction[i]);
                Varname[i] = new JLabel("X"+(i+1));
                Varname[i].setFont(new Font("Arial", Font.BOLD, 16));
                Varname[i].setForeground(Color.WHITE);
//                pn1.add(new Label("X"+(i+1)));
                                pn1.add(Varname[i]);

                if(i != ObjFunction.length-1){
plus[lc] = new JLabel("+");
                     plus[lc].setFont(new Font("Arial", Font.BOLD, 20));
                  plus[lc].setForeground(new Color(204, 204, 204));
                pn1.add(plus[lc]);
                lc++ ;                   }
        }
            
            JLabel st = new JLabel("S.T )");
            st.setFont(new Font("Arial", Font.BOLD, 18));
            st.setForeground(Color.WHITE);
            pn2.add(st);
            
            // constriats
            int i ;
            int v = 0  ;
             Varnameconstr = new JLabel[Varnumber1];
            for (int k = 0; k < Connumber2; k++) {
                
            for ( i = 0; i < ObjFunction.length; i++) {
                ConstraintText[v] = new JTextField(10);
                ConstraintText[v].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ConstraintText[v].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                constr[k].add(ConstraintText[v]);
                v++ ;
                Varnameconstr[i] = new JLabel("X"+(i+1));
                Varnameconstr[i].setFont(new Font("Arial", Font.BOLD, 16));
                Varnameconstr[i].setForeground(Color.WHITE);
                constr[k].add(Varnameconstr[i]);
//                constr[k].add(Varnameconstr[i]);

                if(i != ObjFunction.length-1){
plus[lc] = new JLabel("+");
                    plus[lc].setFont(new Font("Arial", Font.BOLD, 20));
                  plus[lc].setForeground(new Color(204, 204, 204));
                         constr[k].add(plus[lc]);
                         lc++;
                }
        }
            constr[k].add(GreatLess[k]);
            
            ConstraintText[v] = new JTextField(10);
            ConstraintText[v].setFont(new Font("Tahoma", Font.PLAIN, 18));
                 ConstraintText[v].setHorizontalAlignment((int) CENTER_ALIGNMENT);
                   constr[k].add(ConstraintText[v]);
                   v++;
                   
                   pn5.add(constr[k]);

            }
            
            
              btn = new JButton("Solve");
            
            btn.setFont(new Font("Arial", Font.BOLD, 20));
            btn.setBackground(new Color(101, 75, 163));
            pn4.add(btn);
            
                       

            Scrollpanel.add(pn1 , BorderLayout.NORTH);
            Scrollpanel.add(pn2 , BorderLayout.WEST);
            Scrollpanel.add(pn5 , BorderLayout.CENTER);
            Scrollpanel.add(pn3 , BorderLayout.EAST);
            scroll.setViewportView(Scrollpanel);
            jPanel3.add(scroll , BorderLayout.CENTER);
            jPanel3.add(pn4 , BorderLayout.SOUTH);
            
                      scroll.revalidate();
                        scroll.repaint();

            
            pn1.revalidate();
            pn1.repaint();
            pn2.validate();
            pn5.validate();
            pn4.validate();
            
            jPanel3.validate();
                       
            
            btnAction();
        }catch(Exception e){
        
                    JOptionPane.showMessageDialog(null,"Please ?! Enter a Number");

        }
                                
                                }
    }//GEN-LAST:event_jTextField2KeyPressed

    
    
     public enum Constraint {
  lessThan, equal, greatherThan
 }
    
    public void Modeler(double[][] constraintLeftSide,
    double[] constraintRightSide, Constraint[] constraintOperator,double[] objectiveFunction , String objmaxmin){
    
    arrtable = new double[Connumber2 + 1][Varnumber1+ Connumber2 + 1];
    
    // initialize constraint
   for (int i = 0; i < Connumber2; i++) {
    for (int j = 0; j < Varnumber1; j++) {
     arrtable[i][j] = constraintLeftSide[i][j];
    }
   }

   for (int i = 0; i < Connumber2; i++)
    arrtable[i][Connumber2 + Varnumber1] = constraintRightSide[i];

   // initialize slack variable
   for (int i = 0; i < Connumber2; i++) {
    int slack = 0;
    switch (constraintOperator[i]) {
    case greatherThan:
     slack = -1;
     break;
    case lessThan:
     slack = 1;
     break;
    default:
    }
    arrtable[i][Varnumber1 + i] = slack;
   }

   // initialize objective function
     int flag = 0 ;
      for (int i = 0; i < Connumber2 ; i++) {

          if(constraintOperator[i] == Constraint.greatherThan || constraintOperator[i] == Constraint.equal){
          
              flag = 1 ;
              break ;
          }
      }
      
     
      
      
        for (int i = 0; i <Varnumber1; i++) {

            if(flag == 1 &&  objmaxmin == "MAX" && objectiveFunction[i] < 0){
           flagm = 1;
//    Objmaxmin = "MIN";
       }else
           if(flag == 1 &&  objmaxmin == "MIN" && objectiveFunction[i] > 0){
flagm = 1;
//                   Objmaxmin = "MAX";

           }else{
           flagm =0 ;
           break ;
           }
        }
        
   if(objmaxmin == "MAX" && flagm == 1){
    Objmaxmin = "MIN";
       }else
           if(objmaxmin == "MIN" && flagm == 1){
               
                   Objmaxmin = "MAX";

           }
        
   for (int j = 0; j < Varnumber1; j++){
       
       
           arrtable[Connumber2][j] = objectiveFunction[j];

   }

    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Simplex_Inputs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Simplex_Inputs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Simplex_Inputs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Simplex_Inputs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//               Simplex_Inputs in = new Simplex_Inputs();
//               in.setLocationRelativeTo(null);
//                       in.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
